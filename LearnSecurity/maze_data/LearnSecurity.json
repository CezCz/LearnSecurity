[{"model": "LearnSecurity.maze", "pk": 2, "fields": {"name": "BasicLinux", "desc": "Basic Level Linux Maze", "difficulty": 1}}, {"model": "LearnSecurity.level", "pk": 1, "fields": {"maze": 2, "level": 1, "short_description": "man", "program_description": {"Terminal": {"command": "man -P cat whoami", "result": "HISTORY<br/>   1990, 1991 - Originally written by John W. Eaton (jwe@che.utexas.edu).<br/>   Dec 23 1992: Rik Faith (faith@cs.unc.edu) applied bug fixes supplied by<br/>   Willem Kasdorp (wkasdo@nikhefk.nikef.nl).<br/>   30th April 1994 - 23rd February 2000: Wilf. (G.Wilford@ee.surrey.ac.uk)<br/>   has been developing and maintaining this package with the help of a few<br/>   dedicated people.<br/>   30th   October   1996   -  30th  March  2001:  Fabrizio  Polacco <br/>   maintained and enhanced this package for  the  Debian<br/>   project, with the help of all the community.<br/>   31st  March  2001  - present day: Colin Watson  is<br/>   now developing and maintaining man-db.<br/>2.5.7                         2010-02-16                         MAN(1)"}, "Program": {"main": "man - most important program in your linux life. Abbrevated from Manual is complex thorought guide of most programs usage!", "sections": {"1": ["Sometimes there are a few different manual pages for one program. Such pages are divided into sections (Linux distribution order): ", "1 - General commands", "2 - System calls", "3 - C Library functions", "4 - Special files", "5 - File formats", "6 - Games and screensavers", "7 - Miscellanea", "8 - System administration commands and daemons"], "2": ["General man page layout contains:", "NAME - name of a program with short description", "SYNOPSIS - formal usage description", "DESCRIPTION - text program description", "EXAMPLES - examples of common usage", "SEE ALSO - related programs", "And many other such as:", "CONFIGURATION, FILES, OPTION, EXIT STATUS, ERRORS, VERSIONS, NOTES, BUGS, AUTHORS"]}, "important": "To exit manual, press q"}, "Usage": {"man -P cat man": "opens manual for man, -P cat indicates usage of cat program to output data", "man 2 chmod": "opens system calls manual section for chmod", "man ls": "opens manual for ls"}}}}, {"model": "LearnSecurity.level", "pk": 2, "fields": {"maze": 2, "level": 2, "short_description": "ls", "program_description": {"Terminal": {"command": "ls -la", "result": "drwxr-xr-x  2 cezary cezary     4096 sie 16 21:21 .<br/>drwxr-xr-x 27 cezary cezary     4096 sie 16 20:13 ..<br/>-rw-r-----  1 cezary cezary 71028702 mar 16 20:09 atom-amd64.deb<br/>-rw-r-----  1 cezary cezary       18 lut 16 13:23 shell.php"}, "Program": {"main": "ls - prints out directory content.", "sections": {"1": ["ls - like man - comes with a lot of interesting utilities provided with switches.", "Most commontly used are:", "-a - shows all files (including hidden files)", "-l - shows files in verbose mode", "-R shows all catalogs recursively", "-s shows filesizes in blocks", "switches can be combined!"], "2": ["-l switch requires some explaination. Each row looks like this:", "-rw-r--r-- 1 user group 978 Aug 16 18:26 Filename.txt", "1 - File Permissions", "1 - number of links", "3 - Owner", "4 - Group", "5 - Size (in bytes)", "6 - Modification Time", "7 - File Name", "Additionally first row will contain size of content in blocks (without additional size of directory content)"], "3": ["File Permissions", "Columns consists of 10 letters", "First letter is '-' or 'd' meaning respectively file or directly", "Then three groups of three letters indicating Owner, Group and Other permission", "First column 'r' read permission", "Second column 'w' write permission", "Third column 'x' execute permission", "'-' in given position means that permission is not granted", "In example -rwxrw-r-- means it is a file, user has all privledges, group has read and write, all others can read.", "Note that there are more possible values here, please see sticky bit TODO"]}}, "Usage": {"ls -la": "opens manual for man, -P cat indicates usage of cat program to output data", "ls -l": "lists current directory in long format", "ls ~": "lists users home directory"}}}}, {"model": "LearnSecurity.level", "pk": 3, "fields": {"maze": 2, "level": 3, "short_description": "cat", "program_description": {"Terminal": {"command": "cat -En file.txt", "result": " 1 Hello everyone!$ <br/> 2 <br/> 3 What a lovely day."}, "Program": {"main": "cat - concatenate files and print on the standard output. Program initially meant for file concatenation, but serves as just one file printer just as good!", "sections": {"1": ["cat, simple program used to print files to standard output", "Most commontly switches are:", "-n - shows line numbers", "-E - shows line endings by $ sign"], "2": ["What is standard output?", "In linux environment we have three preconnected input and output connection channels. ", "Namely:", "- Standard input (stdin) represented by 0 (yes, zero)", "- Standard output (stdout) represented by 1", "- Standard error (stderr) - 2. ", "Under the hood 0, 1 and 2 are just handles to abstraction of a file - they say everthing in linux is a file.", "What if we wanted to output to a file not to stdout?"], "4": ["What do 0, 1 and 2 have to do with this?", "We can use 0, 1 and 2 to specifically tell which standard stream we want to redirect", "Let's say we don't want to be bothered by errors - ls % 2>/dev/null", "Or log them! - ls % >> logfile.txt", "Or we want to log standard output and standard error - ls abc &> logfile.txt", "As you can see redirecting output is much more interesting here :)."], "3": ["Redirection", "To change data input or data output use:", "- '>' Overwrites destination content with standard output", "cat file.txt > file2.txt - prints file.txt to file2.txt", "- '<' Overwrites standard input with given input", "cat < file.txt - in fact works like cat file.txt", "- '>>' Appends destination content with standard output", "cat file.txt >> file2.txt - appends file.txt at the end of file2.txt", "- '<<' Appends standard input with given input", "If you use this one in real life please e-mail me"]}}, "Usage": {"cat file.txt file2.txt": "prints two concatenated", "cat - > file.txt": "waits for input terminated by EOF sign ", "cat file.txt": "prints file.txt contents to console"}}}}, {"model": "LearnSecurity.level", "pk": 4, "fields": {"maze": 2, "level": 4, "short_description": "cd", "program_description": {"Terminal": {"command": "cd /home/user/Dokumenty", "result": "user@domain~/Dokumenty$"}, "Program": {"main": "cd - Change currently working Directory", "sections": {"1": ["So, let's imagine we are working in file directory /home/cezary/random/stuff/here/cool/working/directory", "Imagine typing ls and that directory everytime. Remeber that ls without directory lists current working directory!", "A lot of programs use that current working directory property. All in all 'cd' is here to make our linux-lives a lot comfier.", "cd without argument usually(it can be changed) lands in your home directory."], "2": ["What is directory", "Directories is an abstraction for organizing your data files in groups.", "Linux filesystem is a hierarchical directory structure, which means directories form a tree graph.", "Root of linux filesystem is /", "Then we can have a folder and a file in it like: /etc/passwd", "There can be a whole partition hidden under a directory!"], "4": ["By the way, don't confuse root directory with root user these are two unrelated things"], "3": ["How to specify directory?", "There are two options:", "Absolute path:", "cd /opt/testing/data/ - starts with root directory / followed by subdirectories", "Relative path:", "cd home/cezary/notes - with current directory /user/backup/ path translates to /user/backup/home/cezary/notes", "Probably you notices while typing ls -l two directories . and .., these are special directories indicating:", ".. parent directory - cd ../../ while being at /home/cezary would land you at /", ". current directory."]}}, "Usage": {"cd /": "changes directory to root directory", "cd": "changes current directory to one specified by $HOME (usually /home/<username>)", "cd ~username": "changes directory to user's home directory"}}}}, {"model": "LearnSecurity.level", "pk": 5, "fields": {"maze": 2, "level": 5, "short_description": "grep", "program_description": {"Terminal": {"command": "grep -n IOException log.txt", "result": "2743:org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document"}, "Program": {"main": "grep - prints lines matching the pattern", "sections": {"1": ["So, what do we have for now. Travesing through filesystem, and displaying stuff.", "Log files tend to be long, what if we wanted filter input?", "grep is a handy tool to achieve filtering", "Mechanism is simple, we're giving input, pattern to match and some switches and get filtered output.", "Pattern is specified by regex.", "Handy switches:", "-e <regex> - specifies explicitly that following string is a pattern, is not necessary but handy and makes starting your regex from '-' possible", "-v - shows all lines NOT matching", "-i - ignores the case of letters", "-n - prints line number with the line"], "2": ["I am not covering all of regex here, it's pretty massive.", "For now we need to know that there are some special characters that are helpful such as:", "^ - begginging of like", "$ - end of line", "[a-z0-9] - one character that is a small letter or a number", ". - any character", "+ - pattern occuring one or more", "* - pattern occuring zero or infinity times", "? - pattern occuring once or "]}}, "Usage": {"grep -ie \"missing\" log.txt": "Searches log.txt for lines containing word 'missing' ignoring word case.", "grep -ne \"missing\" log.txt": "Searches log.txt for lines containing word 'missing', prints their line numbers.", "grep -e \"a$\" log.txt": "Searches log.txt for lines ending with letter a.", "ls -l | grep -e \"^log.*24-08-2016.*txt$\"": "Lists all files from current directory that are logs from 24.08.2016. '|' is here to get you curious :)", "grep IOException log.txt": "Searches log.txt for lines containing IOException."}}}}, {"model": "LearnSecurity.level", "pk": 6, "fields": {"maze": 2, "level": 6, "short_description": "head, tail", "program_description": {"Terminal": {"command": "tail -5 log.txt", "result": "return FilterExpression(token, self)<br/>File \"Python\\Python35-32\\lib\\site-packages\\django\\template\\base.py\", line 703, in __init__<br/>\"from '%s'\" % (token[upto:], token))<br/>django.template.exceptions.TemplateSyntaxError: Could not parse the remainder: ' randomtext' from 'level.program_description.Program.main randomtext'<br/>[24/Aug/2016 21:21:46] \"GET /Maze/BasicLinux/5 HTTP/1.1\" 500 20111"}, "Program": {"main": "head, tail - prints N first/last lines from file", "sections": {"1": ["Sometimes there's only a need for few lines at the beggining or end of file.", "No problem, usage is pretty straightforward, please see Usage"], "2": ["Why don't we print some middle section of a file", "Here you go - head -200 log.txt | tail-10", "How does it work?"], "3": ["Pipes", "Operation we've done is possible because of invention of pipes denoted by |", "It works by simply redirecting standard output (1) to standard input of another program (0)", "Previous example works as follow", "head cuts first 200 lines, then output is redirected to tail which cuts last 10 lines.", "It is very powerfull tool, as you'll notice in following steps."]}}, "Usage": {"head log.txt": "prints first 10 lines of file.", "head -50 log.txt": "prints first 50 lines of file", "tail log.txt": "prints last 10 lines of file", "tail -20 log.txt": "prints last 20 lines of file", "head -200 log.txt | tail -10 | grep -e \"Exception\"": "prints lines 190 - 200 that contain word Exception in log.txt"}}}}, {"model": "LearnSecurity.level", "pk": 7, "fields": {"maze": 2, "level": 7, "short_description": "find", "program_description": {"Terminal": {"command": "find -name \"*.py\"", "result": "./BSK/6/inverse_polynomial.py<br/>./BSK/3/test.py<br/>./BSK/3/des.py<br/>./BSK/3/enc.py<br/>./.atom/packages/atom-beautify/examples/nested-jsbeautifyrc/python/original/test.py<br/>./.atom/packages/atom-beautify/examples/nested-jsbeautifyrc/python/original/test_isort.py<br/>./.atom/packages/atom-beautify/examples/nested-jsbeautifyrc/python/expected/test.py<br/>./.atom/packages/atom-beautify/examples/nested-jsbeautifyrc/python/expected/test_isort.py"}, "Program": {"main": "find - prints N first/last lines from file", "sections": {"1": ["Very robuts utility meant to find files and directiories", "Some of the popular switches (Please see man for full documentation):", "+n -n n - respectively files bigger than, less than or equal to n for numerical values", "-size n[c|w|b|k|M|G] - files size check, with unit k, M and G stand for kilo, mega and giga bytes", "-executable - searches for files with execute permission", "-user <uname> - searches for files owned by user <uname>", "-name <filename> - searches for files with <filename> name", "-exec <command> {} \\; - executes given command, files found are denoted by {}.", "-delete - deletes all findings"]}}, "Usage": {"find / -name \"*.txt\"": "finds all .txt files in all directories", "find -type d": "finds all directories in our current directory", "find -ctime -2": "finds files with any changes performed less than two days ago", "find -name \"*.java\" -exec cp {} /home/cez/stuff \\;": "finds all java files in current directory and copies them to given directory"}}}}, {"model": "LearnSecurity.level", "pk": 8, "fields": {"maze": 2, "level": 8, "short_description": "which", "program_description": {"Terminal": {"command": "echo $PATH", "result": "/usr/local/bin:/usr/bin:/bin"}, "Program": {"main": "which - shows path of a executable program", "sections": {"1": ["Program is used to find where given program is.", "for instance which chromium would output us absolute path to this executable.", "which works by looking up directories listed in PATH environmental variable."], "2": ["Environment variables", "These are a set of named values that affect behaviour of running processes", "While executing any command in bash, it looks up for corresponding program in PATH variable", "PWD - holds our current working directory", "HOME - holds your home directory path", "There are many more, to see all of your environment variables type 'printenv' in terminal", "You can add your own variables as well as change already existing, however change might not be persistant", "To change variable use 'export' <key>=<value>, where key is variable name and value is it's value.", "If given key has more values than one, each value is separated by ':', see PATH.", "To print given variable use echo $<key> pr printenv <key>"]}}, "Usage": {"printenv PATH": "does the same as echo version", "echo $PATH": "prints PATH variable to stdout", "export PATH=$PATH:/home/cezary/": "extends PATH with additional catalogue", "printenv \"MY OWN VARIABLE\" ": "shows variable named MY OWN VARIABLE, note quotes"}}}}, {"model": "LearnSecurity.level", "pk": 9, "fields": {"maze": 2, "level": 9, "short_description": "Text utils", "program_description": {"Terminal": {"command": "echo \"Encrypt this please\" | tr \"[a-zA-Z]\" \"[n-za-mN-ZA-M]\"", "result": "Rapelcg guvf cyrnfr"}, "Program": {"main": "Text utilities", "sections": {"1": ["There are a lot of helpful text processors namely:", "tr - translates or deletes character, used to transform text", "sort - sorts lines of output", "uniq - reports or omits repeated lines", "cut - remove or extract given sections in lines", "wc - word count", "Whats best is that, they can be piped one to another!", "Please see manual for more information"]}}, "Usage": {"cat /etc/passwd | cut -d\":\" -f1,3": "shows first and third column of paswd file with ':' as delimeter", "cat log.txt | tr \"\\n\" \" \"": "Prints log.txt with newlines changed to spaces", "cat log.txt | tr \"[a-zA-Z]\" \"[n-za-mN-ZA-M]\"": "prints log.txt encrypted using ROT13 cipher", "./info.sh | tr -s \" \"": "transforms output of bashscript, by deleting trailing spaces"}}}}, {"model": "LearnSecurity.level", "pk": 10, "fields": {"maze": 2, "level": 10, "short_description": "tar + file", "program_description": {"Terminal": {"command2": "tar -tvf pack", "result2": "-rw-r--r-- cezary/cezary   764 2016-07-21 17:46 blockperm.py<br/>-rw-r--r-- cezary/cezary     6 2016-02-26 11:31 file.txt<br/>-rw-r--r-- cezary/cezary  1283 2016-02-28 12:58 rail.py", "command": "file pack", "result": "package: POSIX tar archive (GNU)"}, "Program": {"main": "file + tar", "sections": {"1": ["file - describes file type", "tar - packs files into one package called tarball, by default does not compress files", "tar can use compression algorithms such as gzip and bzip. See manual"]}}, "Usage": {"tar -tvf pack.tar": "prints contents of a tarball", "file log.txt": "Prints info about log.txt", "tar -cvf pack.tar 1 2 3": "packages files 1, 2 and 3 into tarball named pack.tar"}}}}, {"model": "LearnSecurity.level", "pk": 11, "fields": {"maze": 2, "level": 11, "short_description": "More utils", "program_description": {"Program": {"main": "More utilities", "sections": {"1": ["This is it. You've finished BasicLinux maze.", "More utilities to investigate, which are hard to make meaningful excercises in context of a maze:", "mkdir, rmdir - creates/removes directory", "touch - creates a file", "mv, cp, rm - moves, copies, removes files/directories", "strings - prints printable characters out of any file (i.e binaries)", "history - prints N previous commands typed into terminal", "whoami, date - current user/ current date", "whatis, whereis - information about installed programs", "and many many more to investigate on your own :)"], "2": ["For more throughout linux manual see Linux Fundamentals by Paul Cobbaut http://linux-training.be/linuxfun.pdf"]}}}}}, {"model": "LearnSecurity.levelstep", "pk": 1, "fields": {"level": 1, "level_step": 1, "description": "Search in Game section of basicman manual", "help": "Game is 6th section", "answer": "man 6 basicman", "password": "manpagesarecool"}}, {"model": "LearnSecurity.levelstep", "pk": 2, "fields": {"level": 1, "level_step": 2, "description": "Password is the first line of SYNOPSIS paragraph of sl (check the program itself as well!) - no trailing or preceding spaces", "help": "Starts with 's' and ends with ']'", "answer": "man sl", "password": "sl [ -alFe ]"}}, {"model": "LearnSecurity.levelstep", "pk": 3, "fields": {"level": 2, "level_step": 1, "description": "Name of file under /home/basiclinux/list/pswd", "help": "ls path in description", "answer": "ls ~/list/pswd/", "password": "listcontent"}}, {"model": "LearnSecurity.levelstep", "pk": 4, "fields": {"level": 2, "level_step": 2, "description": "Name of HIDDEN file under /home/basiclinux/list/pswd", "help": "Use man ls to find which switch shows hidden files", "answer": "ls -a ~/list/pswd/", "password": ".hiddentcontent"}}, {"model": "LearnSecurity.levelstep", "pk": 5, "fields": {"level": 2, "level_step": 3, "description": "Password is the privledges column of /home/basiclinux/list/privledges file", "help": "Check manual for long listing format", "answer": "ls -l ~/list/privledges", "password": "-rw-r-----"}}, {"model": "LearnSecurity.levelstep", "pk": 6, "fields": {"level": 3, "level_step": 1, "description": "Password is the content of /home/basiclinux/cat/pass file", "help": "Use cat to display the file", "answer": "cat /home/basiclinux/cat/pass", "password": "cat_in_boots"}}, {"model": "LearnSecurity.levelstep", "pk": 7, "fields": {"level": 3, "level_step": 2, "description": "Password is divided in /home/basiclinux/cat/A/pass ~/cat/B/pass and ~/cat/C/pass files", "help": "cat every file (try to do it using one command)", "answer": "cat ~/cat/A/pass ~/cat/B/pass ~/cat/C/pass", "password": "concatenate"}}, {"model": "LearnSecurity.levelstep", "pk": 8, "fields": {"level": 4, "level_step": 1, "description": "Password is divided is in the last subdirectory of /home/basiclinux/changedir divided", "help": "cd every folder you encouner, then cat A B C files.", "answer": "cd ~/changedir/Phasellus/nec/sapien/vel/mauris/sollicitudin/interdum/nec/eu/ligula && cat A B C", "password": "LoremIpsumDolor"}}, {"model": "LearnSecurity.levelstep", "pk": 9, "fields": {"level": 5, "level_step": 1, "description": "Password is the second word after the word \"password\" in the same line in ~/grep/A file.", "help": "Just grep 'password'!", "answer": "grep /home/basiclinux/grep/A -e \"password\"", "password": "ImagineScrollingHere"}}, {"model": "LearnSecurity.levelstep", "pk": 10, "fields": {"level": 5, "level_step": 2, "description": "Password is the equation result of \"-2*2\" stored in file ~/grep/B", "help": "Look for -e switch in manual", "answer": "grep /home/basiclinux/grep/B -e \\\"-2\\\\*2\\\"", "password": "MathIsForMathematicans"}}, {"model": "LearnSecurity.levelstep", "pk": 11, "fields": {"level": 5, "level_step": 3, "description": "Password is on the 1800th line in file ~/grep/C", "help": "try make cat display line numbers, then grep", "answer": "cat -n /home/basiclinux/grep/C", "password": "BankOfFranceFounded"}}, {"model": "LearnSecurity.levelstep", "pk": 12, "fields": {"level": 5, "level_step": 1, "description": "Password starts with '*' and ends with ';' in file ~/grep/D", "help": "See what ^ .* and $ mean in regex.", "answer": "grep /home/basiclinux/grep/D -e \"^*.*;$\"", "password": "*int magic = 2321;"}}, {"model": "LearnSecurity.levelstep", "pk": 13, "fields": {"level": 6, "level_step": 1, "description": "Password is the first and last line of ~/headtail/A file", "help": "Use head and tail to display lines", "answer": "head -1 ~/headtail/A && tail -1 ~/headtail/A", "password": "alphaomega"}}, {"model": "LearnSecurity.levelstep", "pk": 14, "fields": {"level": 6, "level_step": 2, "description": "Password is in lines between 1690- 1703, delete newlines", "help": "head first N lines then subtract K lines with tail", "answer": "head -1703 ~/headtail/A | tail -14", "password": "BETAGAMMADELTA"}}, {"model": "LearnSecurity.levelstep", "pk": 15, "fields": {"level": 7, "level_step": 1, "description": "Password is in a file in ~/find directory that is exactly 2048 bytes and is owned by basiclinux", "help": "Look for a switch indicating size and user.", "answer": "find /home/basiclinux/find/ -size 2048c -user basiclinux", "password": "FOOBAR"}}, {"model": "LearnSecurity.levelstep", "pk": 16, "fields": {"level": 8, "level_step": 1, "description": "Path of basicman program", "help": "Simply use which.", "answer": "which basicman", "password": "/usr/local/bin/basicman"}}, {"model": "LearnSecurity.levelstep", "pk": 17, "fields": {"level": 8, "level_step": 2, "description": "echo PATH variable", "help": "Environmental variables are denoted by $ sign.", "answer": "echo $PATH", "password": "/home/basiclinux"}}, {"model": "LearnSecurity.levelstep", "pk": 18, "fields": {"level": 9, "level_step": 1, "description": "Password is number of unique lines of ~/filter/A file", "help": "See uniq, wc and remember the piping.", "answer": "uniq filter/A | wc -l", "password": "1337"}}, {"model": "LearnSecurity.levelstep", "pk": 19, "fields": {"level": 9, "level_step": 2, "description": "Password is the third column of ~/filter/B file, it is encoded using rot3 encryption. Delete whitespaces.", "help": "This one might take a while to figure out, rot enc/dec can be done using tr", "answer": "cat filter/B | cut -d\"|\" -f3 | tr -d \"\\n\\\" | tr \"[A-Za-z]\" \"[X-ZA-Wx-za-w]\"", "password": "CaesarCipher"}}, {"model": "LearnSecurity.levelstep", "pk": 20, "fields": {"level": 10, "level_step": 1, "description": "Unpack ~/tar/file, password is in A file. Note file sizes of each package.", "help": "Use file to see package type. Package types are tar, gzip and bzip2.", "answer": "tar -jxvf file OR tar -zxvf file OR tar -xvf file", "password": "PidgeonHolePrinciple"}}]